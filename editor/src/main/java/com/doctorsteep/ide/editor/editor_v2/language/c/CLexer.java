/* The following code was generated by JFlex 1.6.1 */

package com.doctorsteep.ide.editor.editor_v2.language.c;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>E:/code/Java/jflex-master/jflex/examples/java/cNew.flex</tt>
 */
public class CLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;
  public static final int PRETREATMENT = 6;
  public static final int DEFINE = 8;
  public static final int DEFINE_NEW_LINE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\102\1\103\1\1\16\7\4\0\1\30\1\74"+
    "\1\24\1\27\1\6\1\74\1\76\1\25\1\61\1\62\1\5\1\100"+
    "\1\70\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\75"+
    "\1\67\1\73\1\71\1\72\1\75\1\0\3\14\1\20\1\22\1\20"+
    "\5\101\1\12\13\101\1\13\2\101\1\65\1\26\1\66\1\74\1\101"+
    "\1\0\1\45\1\51\1\42\1\41\1\31\1\37\1\46\1\53\1\36"+
    "\1\101\1\52\1\34\1\47\1\40\1\33\1\44\1\101\1\32\1\35"+
    "\1\50\1\43\1\60\1\55\1\54\1\57\1\56\1\63\1\77\1\64"+
    "\1\75\6\7\1\104\32\7\2\0\4\6\4\0\1\6\2\0\1\7"+
    "\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6"+
    "\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7"+
    "\5\6\1\0\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0"+
    "\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0"+
    "\236\6\11\0\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0"+
    "\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0"+
    "\33\6\5\0\3\6\15\0\5\7\6\0\1\6\4\0\13\7\5\0"+
    "\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0"+
    "\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6"+
    "\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6"+
    "\16\0\12\7\41\6\11\7\2\6\4\0\1\6\5\0\26\6\4\7"+
    "\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7\104\0"+
    "\1\6\1\0\13\6\67\0\33\7\1\0\4\7\66\6\3\7\1\6"+
    "\22\7\1\6\7\7\12\6\2\7\2\0\12\7\1\0\7\6\1\0"+
    "\7\6\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6"+
    "\2\7\2\0\12\7\4\6\7\0\1\6\5\0\3\7\1\0\6\6"+
    "\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7"+
    "\3\0\1\7\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7"+
    "\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7"+
    "\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0"+
    "\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0"+
    "\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0"+
    "\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0"+
    "\4\7\2\0\1\6\6\0\1\7\16\0\12\7\11\0\1\6\7\0"+
    "\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\1\0\2\6\6\0\2\6\2\7\2\0\12\7\22\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0"+
    "\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0"+
    "\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6\17\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0"+
    "\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0"+
    "\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0"+
    "\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7"+
    "\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0"+
    "\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0"+
    "\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7"+
    "\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0"+
    "\6\7\2\0\12\7\2\0\4\6\40\0\1\6\27\0\2\7\6\0"+
    "\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6"+
    "\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7"+
    "\11\0\1\7\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7"+
    "\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7"+
    "\1\6\17\7\2\0\46\6\1\0\1\6\5\0\1\6\2\0\53\6"+
    "\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6"+
    "\2\0\103\6\2\0\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6"+
    "\2\0\21\6\1\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6"+
    "\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0"+
    "\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6"+
    "\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0"+
    "\130\6\10\0\51\6\1\7\1\6\5\0\106\6\12\0\35\6\3\0"+
    "\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6"+
    "\4\0\21\7\7\6\2\7\6\0\12\7\46\0\27\6\5\7\4\0"+
    "\65\6\12\7\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\6"+
    "\130\0\5\7\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0"+
    "\3\7\36\6\15\7\2\6\12\7\54\6\16\7\14\0\44\6\24\7"+
    "\10\0\12\7\3\0\3\6\12\7\44\6\122\0\3\7\1\0\25\7"+
    "\4\6\1\7\4\6\3\7\2\6\11\0\300\6\47\7\25\0\4\7"+
    "\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0"+
    "\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0"+
    "\6\6\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\7\30\0"+
    "\1\102\1\102\5\7\20\0\2\6\23\0\1\6\13\0\5\7\5\0"+
    "\6\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0\33\6\25\0"+
    "\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0"+
    "\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0"+
    "\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0"+
    "\4\6\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0"+
    "\70\6\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6"+
    "\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0"+
    "\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0"+
    "\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0"+
    "\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7"+
    "\4\0\12\7\1\0\31\6\7\0\1\7\120\6\2\7\45\0\11\6"+
    "\2\0\147\6\2\0\4\6\1\0\4\6\14\0\13\6\115\0\12\6"+
    "\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0"+
    "\64\6\14\0\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6"+
    "\3\0\1\6\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0"+
    "\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7\46\0\51\6"+
    "\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6"+
    "\3\0\1\6\1\7\4\0\60\6\1\7\1\6\3\7\2\6\2\7"+
    "\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0\13\6\5\7"+
    "\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0\6\6\11\0"+
    "\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0\12\7"+
    "\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6"+
    "\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6"+
    "\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6"+
    "\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7"+
    "\20\0\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6"+
    "\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6"+
    "\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6"+
    "\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7"+
    "\4\0\14\6\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6"+
    "\2\0\16\6\42\0\173\6\105\0\65\6\210\0\1\7\202\0\35\6"+
    "\3\0\61\6\57\0\37\6\21\0\33\6\65\0\36\6\2\0\44\6"+
    "\4\0\10\6\1\0\5\6\52\0\236\6\2\0\12\7\u0356\0\6\6"+
    "\2\0\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0\27\6"+
    "\252\0\26\6\12\0\32\6\106\0\70\6\6\0\2\6\100\0\1\6"+
    "\3\7\1\0\2\7\5\0\4\7\4\6\1\0\3\6\1\0\33\6"+
    "\4\0\3\7\4\0\1\7\40\0\35\6\203\0\66\6\12\0\26\6"+
    "\12\0\23\6\215\0\111\6\u03b7\0\3\7\65\6\17\7\37\0\12\7"+
    "\20\0\3\7\55\6\13\7\2\0\1\7\22\0\31\6\7\0\12\7"+
    "\6\0\3\7\44\6\16\7\1\0\12\7\100\0\3\7\60\6\16\7"+
    "\4\6\13\0\12\7\u04a6\0\53\6\15\7\10\0\12\7\u0936\0\u036f\6"+
    "\221\0\143\6\u0b9d\0\u042f\6\u33d1\0\u0239\6\u04c7\0\105\6\13\0\1\6"+
    "\56\7\20\0\4\7\15\6\u4060\0\2\6\u2163\0\5\7\3\0\26\7"+
    "\2\0\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\6\1\0\107\6"+
    "\1\0\2\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6"+
    "\1\0\1\6\1\0\7\6\1\0\101\6\1\0\4\6\2\0\10\6"+
    "\1\0\7\6\1\0\34\6\1\0\4\6\1\0\5\6\1\0\1\6"+
    "\3\0\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6\1\0\37\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\10\6\2\0\62\7\u1600\0\4\6"+
    "\1\0\33\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6"+
    "\1\0\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6"+
    "\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4\6"+
    "\1\0\4\6\1\0\1\6\1\0\12\6\1\0\21\6\5\0\3\6"+
    "\1\0\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6"+
    "\u3fe2\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\2\1\3\2\4\1\5\2\6\1\7"+
    "\1\4\1\10\1\11\1\1\17\5\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\6\4\1\22\2\23"+
    "\1\24\1\1\1\25\1\26\1\1\2\27\4\30\1\31"+
    "\5\30\2\32\1\33\1\0\1\6\1\34\1\6\1\0"+
    "\3\6\2\34\10\0\11\5\1\35\4\5\1\35\11\5"+
    "\1\22\1\36\1\0\2\33\1\0\4\6\1\34\5\0"+
    "\1\37\4\0\31\5\2\36\1\0\3\6\10\0\17\5"+
    "\3\6\1\0\1\40\4\0\7\5\3\6\1\37\3\0"+
    "\2\5\14\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\1\0\1\6"+
    "\1\34\1\0\5\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u019e\0\u019e\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381"+
    "\0\u03c6\0\u019e\0\u019e\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f"+
    "\0\u0564\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747"+
    "\0\u078c\0\u07d1\0\u0816\0\u019e\0\u019e\0\u019e\0\u019e\0\u019e"+
    "\0\u019e\0\u019e\0\u019e\0\u085b\0\u08a0\0\u019e\0\u08e5\0\u092a"+
    "\0\u096f\0\u09b4\0\u09f9\0\u019e\0\u019e\0\u0a3e\0\u019e\0\u019e"+
    "\0\u0a83\0\u019e\0\u0ac8\0\u019e\0\u0b0d\0\u0b52\0\u0b97\0\u019e"+
    "\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u019e\0\u0d7a"+
    "\0\u0dbf\0\u0e04\0\u0e49\0\u019e\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d"+
    "\0\u019e\0\u0fa2\0\u0fe7\0\u040b\0\u102c\0\u1071\0\u10b6\0\u10fb"+
    "\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323"+
    "\0\u1368\0\u13ad\0\u13f2\0\u02b2\0\u1437\0\u147c\0\u14c1\0\u1506"+
    "\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e"+
    "\0\u1773\0\u17b8\0\u019e\0\u17fd\0\u1842\0\u1887\0\u019e\0\u18cc"+
    "\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4"+
    "\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c"+
    "\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44"+
    "\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c"+
    "\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394"+
    "\0\u23d9\0\u019e\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577"+
    "\0\u25bc\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f"+
    "\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7"+
    "\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef"+
    "\0\u2c34\0\u019e\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2"+
    "\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa"+
    "\0\u019e\0\u303f\0\u3084\0\u30c9\0\u310e\0\u3153\0\u3198\0\u31dd"+
    "\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u33c0\0\u3405"+
    "\0\u344a\0\u348f\0\u34d4\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u362d"+
    "\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810\0\u3855"+
    "\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u39f3\0\u3a38"+
    "\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\7"+
    "\1\16\1\17\3\15\3\17\1\15\1\20\1\15\1\21"+
    "\1\22\1\23\1\7\1\24\1\12\1\25\1\26\1\15"+
    "\1\27\1\30\1\31\1\32\1\15\1\33\1\34\1\35"+
    "\1\15\1\36\1\37\1\15\1\40\1\41\3\15\1\42"+
    "\2\15\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\14\1\54\1\55\1\14\1\56\1\57"+
    "\1\60\1\61\1\15\1\7\1\12\1\7\1\62\1\63"+
    "\1\64\21\62\1\65\1\62\1\66\56\62\1\67\1\63"+
    "\1\64\22\67\1\70\1\71\56\67\1\7\1\63\1\64"+
    "\1\72\1\73\3\7\15\72\3\7\31\72\11\7\2\72"+
    "\5\7\1\72\1\7\1\72\2\7\1\63\1\64\1\74"+
    "\1\75\1\76\2\7\13\74\1\77\2\7\1\100\1\7"+
    "\41\74\1\76\1\101\1\102\1\76\1\74\1\103\1\104"+
    "\1\105\1\74\1\7\1\74\2\7\1\106\1\107\1\74"+
    "\24\7\1\74\52\7\1\74\1\7\107\0\1\11\106\0"+
    "\1\110\1\111\63\0\1\56\104\0\1\56\21\0\13\15"+
    "\1\0\1\15\6\0\30\15\20\0\1\15\2\0\1\15"+
    "\10\0\1\112\1\113\1\114\1\115\1\0\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\6\0\1\123\2\0\1\114"+
    "\2\0\1\121\1\0\1\121\12\0\1\115\40\0\2\17"+
    "\1\114\2\0\3\17\1\121\1\122\1\123\6\0\1\123"+
    "\2\0\1\114\2\0\1\121\1\0\1\121\53\0\2\122"+
    "\3\0\3\122\110\0\1\56\45\0\1\56\43\0\1\124"+
    "\1\125\2\0\1\126\1\0\1\127\2\0\1\130\1\0"+
    "\1\131\1\132\46\0\13\15\1\0\1\15\6\0\3\15"+
    "\1\133\3\15\1\134\13\15\1\135\4\15\20\0\1\15"+
    "\2\0\1\15\6\0\13\15\1\0\1\15\6\0\1\136"+
    "\27\15\20\0\1\15\2\0\1\15\6\0\13\15\1\0"+
    "\1\15\6\0\2\15\1\137\25\15\20\0\1\15\2\0"+
    "\1\15\6\0\13\15\1\0\1\15\6\0\5\15\1\140"+
    "\11\15\1\141\2\15\1\142\1\15\1\143\3\15\20\0"+
    "\1\15\2\0\1\15\6\0\13\15\1\0\1\15\6\0"+
    "\6\15\1\144\1\145\20\15\20\0\1\15\2\0\1\15"+
    "\6\0\13\15\1\0\1\15\6\0\2\15\1\146\1\147"+
    "\24\15\20\0\1\15\2\0\1\15\6\0\13\15\1\0"+
    "\1\15\6\0\1\150\1\15\1\151\25\15\20\0\1\15"+
    "\2\0\1\15\6\0\13\15\1\0\1\15\6\0\2\15"+
    "\1\152\11\15\1\153\5\15\1\154\5\15\20\0\1\15"+
    "\2\0\1\15\6\0\13\15\1\0\1\15\6\0\7\15"+
    "\1\155\20\15\20\0\1\15\2\0\1\15\6\0\13\15"+
    "\1\0\1\15\6\0\12\15\1\156\15\15\20\0\1\15"+
    "\2\0\1\15\6\0\13\15\1\0\1\15\6\0\2\15"+
    "\1\156\25\15\20\0\1\15\2\0\1\15\6\0\13\15"+
    "\1\0\1\15\6\0\26\15\1\157\1\15\20\0\1\15"+
    "\2\0\1\15\6\0\13\15\1\0\1\15\6\0\1\15"+
    "\1\160\26\15\20\0\1\15\2\0\1\15\6\0\13\15"+
    "\1\0\1\15\6\0\22\15\1\161\5\15\20\0\1\15"+
    "\2\0\1\15\6\0\13\15\1\0\1\15\6\0\2\15"+
    "\1\162\25\15\20\0\1\15\2\0\1\15\71\0\1\56"+
    "\1\14\103\0\1\56\1\0\1\14\102\0\1\56\4\0"+
    "\1\56\77\0\1\56\5\0\1\56\76\0\1\56\6\0"+
    "\1\56\4\0\1\62\2\0\21\62\1\0\1\62\1\0"+
    "\56\62\2\0\1\64\102\0\1\163\2\0\77\163\3\0"+
    "\1\67\2\0\77\67\7\0\1\164\1\165\103\0\1\164"+
    "\1\165\63\0\1\74\104\0\1\74\36\0\1\74\45\0"+
    "\1\74\104\0\1\74\1\76\103\0\1\74\1\0\1\76"+
    "\102\0\1\74\4\0\1\74\77\0\1\74\5\0\1\74"+
    "\76\0\1\74\6\0\1\74\6\0\1\107\102\0\1\110"+
    "\1\166\1\167\102\110\5\111\1\170\77\111\10\0\1\112"+
    "\1\113\1\114\2\0\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\6\0\1\123\2\0\1\114\2\0\1\121\1\0"+
    "\1\121\53\0\2\113\3\0\3\113\1\121\1\122\1\123"+
    "\6\0\1\123\5\0\1\121\1\0\1\121\53\0\1\171"+
    "\1\172\2\0\5\172\1\0\1\172\6\0\1\172\5\0"+
    "\1\172\1\0\2\172\2\0\1\172\3\0\1\172\43\0"+
    "\1\173\1\113\1\114\2\0\3\173\1\121\1\122\1\123"+
    "\6\0\1\123\2\0\1\114\2\0\1\121\1\0\1\121"+
    "\53\0\1\120\1\113\1\114\2\0\3\120\1\121\1\122"+
    "\1\123\6\0\1\123\2\0\1\114\2\0\1\121\1\0"+
    "\1\121\53\0\1\174\1\113\1\114\2\0\3\174\1\121"+
    "\1\122\1\123\6\0\1\123\2\0\1\114\2\0\1\121"+
    "\1\0\1\121\53\0\2\122\3\0\3\122\1\121\1\0"+
    "\1\123\6\0\1\123\5\0\1\121\1\0\1\121\53\0"+
    "\2\175\3\0\3\175\3\0\1\176\54\0\1\176\36\0"+
    "\1\177\1\0\1\200\3\0\1\201\102\0\1\202\105\0"+
    "\1\203\1\204\75\0\1\205\113\0\1\206\76\0\1\207"+
    "\60\0\13\15\1\0\1\15\6\0\4\15\1\210\23\15"+
    "\20\0\1\15\2\0\1\15\6\0\13\15\1\0\1\15"+
    "\6\0\12\15\1\211\15\15\20\0\1\15\2\0\1\15"+
    "\6\0\13\15\1\0\1\15\6\0\17\15\1\212\10\15"+
    "\20\0\1\15\2\0\1\15\6\0\13\15\1\0\1\15"+
    "\6\0\15\15\1\213\1\15\1\214\10\15\20\0\1\15"+
    "\2\0\1\15\6\0\13\15\1\0\1\15\6\0\7\15"+
    "\1\215\20\15\20\0\1\15\2\0\1\15\6\0\13\15"+
    "\1\0\1\15\6\0\15\15\1\216\7\15\1\217\2\15"+
    "\20\0\1\15\2\0\1\15\6\0\13\15\1\0\1\15"+
    "\6\0\1\15\1\220\12\15\1\221\13\15\20\0\1\15"+
    "\2\0\1\15\6\0\13\15\1\0\1\15\6\0\2\15"+
    "\1\222\25\15\20\0\1\15\2\0\1\15\6\0\13\15"+
    "\1\0\1\15\6\0\5\15\1\223\22\15\20\0\1\15"+
    "\2\0\1\15\6\0\13\15\1\0\1\15\6\0\11\15"+
    "\1\224\5\15\1\144\10\15\20\0\1\15\2\0\1\15"+
    "\6\0\13\15\1\0\1\15\6\0\1\15\1\144\26\15"+
    "\20\0\1\15\2\0\1\15\6\0\13\15\1\0\1\15"+
    "\6\0\2\15\1\225\25\15\20\0\1\15\2\0\1\15"+
    "\6\0\13\15\1\0\1\15\6\0\6\15\1\226\21\15"+
    "\20\0\1\15\2\0\1\15\6\0\13\15\1\0\1\15"+
    "\6\0\12\15\1\227\15\15\20\0\1\15\2\0\1\15"+
    "\6\0\13\15\1\0\1\15\6\0\7\15\1\230\20\15"+
    "\20\0\1\15\2\0\1\15\6\0\13\15\1\0\1\15"+
    "\6\0\4\15\1\210\12\15\1\231\10\15\20\0\1\15"+
    "\2\0\1\15\6\0\13\15\1\0\1\15\6\0\14\15"+
    "\1\146\13\15\20\0\1\15\2\0\1\15\6\0\13\15"+
    "\1\0\1\15\6\0\4\15\1\232\1\233\22\15\20\0"+
    "\1\15\2\0\1\15\6\0\13\15\1\0\1\15\6\0"+
    "\17\15\1\234\10\15\20\0\1\15\2\0\1\15\6\0"+
    "\13\15\1\0\1\15\6\0\13\15\1\235\14\15\20\0"+
    "\1\15\2\0\1\15\6\0\13\15\1\0\1\15\6\0"+
    "\1\236\27\15\20\0\1\15\2\0\1\15\6\0\13\15"+
    "\1\0\1\15\6\0\5\15\1\237\22\15\20\0\1\15"+
    "\2\0\1\15\6\0\13\15\1\0\1\15\6\0\5\15"+
    "\1\240\22\15\20\0\1\15\2\0\1\15\1\164\1\241"+
    "\1\242\102\164\5\165\1\243\77\165\2\0\1\167\102\0"+
    "\4\111\1\167\1\170\77\111\10\0\1\171\1\172\1\114"+
    "\1\0\5\172\1\0\1\172\6\0\1\172\2\0\1\114"+
    "\2\0\1\172\1\0\2\172\2\0\1\172\3\0\1\172"+
    "\43\0\2\244\1\114\1\0\5\244\1\0\1\244\6\0"+
    "\1\244\2\0\1\114\2\0\1\244\1\0\2\244\2\0"+
    "\1\244\3\0\1\244\43\0\1\245\1\113\1\114\2\0"+
    "\3\245\1\121\1\122\1\123\6\0\1\123\2\0\1\114"+
    "\2\0\1\121\1\0\1\121\53\0\1\246\1\113\1\114"+
    "\2\0\3\246\1\121\1\122\1\123\6\0\1\123\2\0"+
    "\1\114\2\0\1\121\1\0\1\121\53\0\2\175\3\0"+
    "\3\175\1\121\16\0\1\121\1\0\1\121\53\0\2\175"+
    "\3\0\3\175\117\0\1\247\107\0\1\250\1\251\107\0"+
    "\1\252\103\0\1\250\104\0\1\206\1\253\105\0\1\254"+
    "\101\0\1\255\106\0\1\253\110\0\1\256\45\0\13\15"+
    "\1\0\1\15\6\0\1\144\27\15\20\0\1\15\2\0"+
    "\1\15\6\0\13\15\1\0\1\15\6\0\16\15\1\144"+
    "\11\15\20\0\1\15\2\0\1\15\6\0\13\15\1\0"+
    "\1\15\6\0\1\257\27\15\20\0\1\15\2\0\1\15"+
    "\6\0\13\15\1\0\1\15\6\0\5\15\1\260\22\15"+
    "\20\0\1\15\2\0\1\15\6\0\13\15\1\0\1\15"+
    "\6\0\12\15\1\257\15\15\20\0\1\15\2\0\1\15"+
    "\6\0\13\15\1\0\1\15\6\0\15\15\1\144\12\15"+
    "\20\0\1\15\2\0\1\15\6\0\13\15\1\0\1\15"+
    "\6\0\7\15\1\261\20\15\20\0\1\15\2\0\1\15"+
    "\6\0\13\15\1\0\1\15\6\0\1\262\27\15\20\0"+
    "\1\15\2\0\1\15\6\0\13\15\1\0\1\15\6\0"+
    "\12\15\1\263\15\15\20\0\1\15\2\0\1\15\6\0"+
    "\13\15\1\0\1\15\6\0\17\15\1\264\10\15\20\0"+
    "\1\15\2\0\1\15\6\0\13\15\1\0\1\15\6\0"+
    "\1\15\1\265\26\15\20\0\1\15\2\0\1\15\6\0"+
    "\13\15\1\0\1\15\6\0\17\15\1\231\10\15\20\0"+
    "\1\15\2\0\1\15\6\0\13\15\1\0\1\15\6\0"+
    "\3\15\1\266\24\15\20\0\1\15\2\0\1\15\6\0"+
    "\13\15\1\0\1\15\6\0\14\15\1\265\13\15\20\0"+
    "\1\15\2\0\1\15\6\0\13\15\1\0\1\15\6\0"+
    "\14\15\1\267\13\15\20\0\1\15\2\0\1\15\6\0"+
    "\13\15\1\0\1\15\6\0\20\15\1\237\7\15\20\0"+
    "\1\15\2\0\1\15\6\0\13\15\1\0\1\15\6\0"+
    "\4\15\1\265\12\15\1\270\10\15\20\0\1\15\2\0"+
    "\1\15\6\0\13\15\1\0\1\15\6\0\11\15\1\271"+
    "\16\15\20\0\1\15\2\0\1\15\6\0\13\15\1\0"+
    "\1\15\6\0\5\15\1\272\22\15\20\0\1\15\2\0"+
    "\1\15\6\0\13\15\1\0\1\15\6\0\2\15\1\273"+
    "\25\15\20\0\1\15\2\0\1\15\6\0\13\15\1\0"+
    "\1\15\6\0\2\15\1\144\25\15\20\0\1\15\2\0"+
    "\1\15\6\0\13\15\1\0\1\15\6\0\1\274\27\15"+
    "\20\0\1\15\2\0\1\15\6\0\13\15\1\0\1\15"+
    "\6\0\14\15\1\275\13\15\20\0\1\15\2\0\1\15"+
    "\6\0\13\15\1\0\1\15\6\0\3\15\1\210\24\15"+
    "\20\0\1\15\2\0\1\15\6\0\13\15\1\0\1\15"+
    "\6\0\10\15\1\144\17\15\20\0\1\15\2\0\1\15"+
    "\2\0\1\242\102\0\4\165\1\242\1\243\77\165\10\0"+
    "\2\276\1\114\1\0\5\276\1\0\1\276\6\0\1\276"+
    "\2\0\1\114\2\0\1\276\1\0\2\276\2\0\1\276"+
    "\3\0\1\276\43\0\1\277\1\113\1\114\2\0\3\277"+
    "\1\121\1\122\1\123\6\0\1\123\2\0\1\114\2\0"+
    "\1\121\1\0\1\121\53\0\1\300\1\113\1\114\2\0"+
    "\3\300\1\121\1\122\1\123\6\0\1\123\2\0\1\114"+
    "\2\0\1\121\1\0\1\121\76\0\1\301\102\0\1\302"+
    "\112\0\1\302\103\0\1\251\77\0\1\303\107\0\1\304"+
    "\106\0\1\305\114\0\1\306\44\0\13\15\1\0\1\15"+
    "\6\0\1\15\1\273\26\15\20\0\1\15\2\0\1\15"+
    "\6\0\13\15\1\0\1\15\6\0\4\15\1\307\23\15"+
    "\20\0\1\15\2\0\1\15\6\0\13\15\1\0\1\15"+
    "\6\0\1\240\27\15\20\0\1\15\2\0\1\15\6\0"+
    "\13\15\1\0\1\15\6\0\2\15\1\310\25\15\20\0"+
    "\1\15\2\0\1\15\6\0\13\15\1\0\1\15\6\0"+
    "\11\15\1\265\16\15\20\0\1\15\2\0\1\15\6\0"+
    "\13\15\1\0\1\15\6\0\5\15\1\311\22\15\20\0"+
    "\1\15\2\0\1\15\6\0\13\15\1\0\1\15\6\0"+
    "\17\15\1\144\10\15\20\0\1\15\2\0\1\15\6\0"+
    "\13\15\1\0\1\15\6\0\12\15\1\312\15\15\20\0"+
    "\1\15\2\0\1\15\6\0\13\15\1\0\1\15\6\0"+
    "\12\15\1\313\15\15\20\0\1\15\2\0\1\15\6\0"+
    "\13\15\1\0\1\15\6\0\5\15\1\314\22\15\20\0"+
    "\1\15\2\0\1\15\6\0\13\15\1\0\1\15\6\0"+
    "\22\15\1\144\5\15\20\0\1\15\2\0\1\15\6\0"+
    "\13\15\1\0\1\15\6\0\15\15\1\216\12\15\20\0"+
    "\1\15\2\0\1\15\6\0\13\15\1\0\1\15\6\0"+
    "\7\15\1\144\20\15\20\0\1\15\2\0\1\15\6\0"+
    "\13\15\1\0\1\15\6\0\10\15\1\315\17\15\20\0"+
    "\1\15\2\0\1\15\6\0\13\15\1\0\1\15\6\0"+
    "\21\15\1\144\6\15\20\0\1\15\2\0\1\15\10\0"+
    "\2\316\1\114\1\0\5\316\1\0\1\316\6\0\1\316"+
    "\2\0\1\114\2\0\1\316\1\0\2\316\2\0\1\316"+
    "\3\0\1\316\43\0\1\317\1\113\1\114\2\0\3\317"+
    "\1\121\1\122\1\123\6\0\1\123\2\0\1\114\2\0"+
    "\1\121\1\0\1\121\53\0\1\320\1\113\1\114\2\0"+
    "\3\320\1\121\1\122\1\123\6\0\1\123\2\0\1\114"+
    "\2\0\1\121\1\0\1\121\75\0\1\302\111\0\1\321"+
    "\110\0\1\322\101\0\1\323\113\0\1\324\43\0\13\15"+
    "\1\0\1\15\6\0\17\15\1\325\10\15\20\0\1\15"+
    "\2\0\1\15\6\0\13\15\1\0\1\15\6\0\6\15"+
    "\1\144\21\15\20\0\1\15\2\0\1\15\6\0\13\15"+
    "\1\0\1\15\6\0\11\15\1\144\16\15\20\0\1\15"+
    "\2\0\1\15\6\0\13\15\1\0\1\15\6\0\10\15"+
    "\1\210\17\15\20\0\1\15\2\0\1\15\6\0\13\15"+
    "\1\0\1\15\6\0\3\15\1\265\24\15\20\0\1\15"+
    "\2\0\1\15\6\0\13\15\1\0\1\15\6\0\7\15"+
    "\1\326\20\15\20\0\1\15\2\0\1\15\6\0\13\15"+
    "\1\0\1\15\6\0\1\310\27\15\20\0\1\15\2\0"+
    "\1\15\10\0\2\327\1\114\1\0\5\327\1\0\1\327"+
    "\6\0\1\327\2\0\1\114\2\0\1\327\1\0\2\327"+
    "\2\0\1\327\3\0\1\327\43\0\1\330\1\113\1\114"+
    "\2\0\3\330\1\121\1\122\1\123\6\0\1\123\2\0"+
    "\1\114\2\0\1\121\1\0\1\121\53\0\1\331\1\113"+
    "\1\114\2\0\3\331\1\121\1\122\1\123\6\0\1\123"+
    "\2\0\1\114\2\0\1\121\1\0\1\121\104\0\1\250"+
    "\74\0\1\321\120\0\1\302\45\0\13\15\1\0\1\15"+
    "\6\0\1\146\27\15\20\0\1\15\2\0\1\15\6\0"+
    "\13\15\1\0\1\15\6\0\12\15\1\210\15\15\20\0"+
    "\1\15\2\0\1\15\10\0\2\332\1\114\1\0\5\332"+
    "\1\0\1\332\6\0\1\332\2\0\1\114\2\0\1\332"+
    "\1\0\2\332\2\0\1\332\3\0\1\332\43\0\1\333"+
    "\1\113\1\114\2\0\3\333\1\121\1\122\1\123\6\0"+
    "\1\123\2\0\1\114\2\0\1\121\1\0\1\121\53\0"+
    "\1\334\1\113\1\114\2\0\3\334\1\121\1\122\1\123"+
    "\6\0\1\123\2\0\1\114\2\0\1\121\1\0\1\121"+
    "\53\0\2\335\1\114\1\0\5\335\1\0\1\335\6\0"+
    "\1\335\2\0\1\114\2\0\1\335\1\0\2\335\2\0"+
    "\1\335\3\0\1\335\43\0\1\336\1\113\1\114\2\0"+
    "\3\336\1\121\1\122\1\123\6\0\1\123\2\0\1\114"+
    "\2\0\1\121\1\0\1\121\53\0\1\337\1\113\1\114"+
    "\2\0\3\337\1\121\1\122\1\123\6\0\1\123\2\0"+
    "\1\114\2\0\1\121\1\0\1\121\53\0\2\340\1\114"+
    "\1\0\5\340\1\0\1\340\6\0\1\340\2\0\1\114"+
    "\2\0\1\340\1\0\2\340\2\0\1\340\3\0\1\340"+
    "\43\0\1\341\1\113\1\114\2\0\3\341\1\121\1\122"+
    "\1\123\6\0\1\123\2\0\1\114\2\0\1\121\1\0"+
    "\1\121\53\0\1\342\1\113\1\114\2\0\3\342\1\121"+
    "\1\122\1\123\6\0\1\123\2\0\1\114\2\0\1\121"+
    "\1\0\1\121\53\0\2\343\1\114\1\0\5\343\1\0"+
    "\1\343\6\0\1\343\2\0\1\114\2\0\1\343\1\0"+
    "\2\343\2\0\1\343\3\0\1\343\43\0\1\344\1\113"+
    "\1\114\2\0\3\344\1\121\1\122\1\123\6\0\1\123"+
    "\2\0\1\114\2\0\1\121\1\0\1\121\53\0\1\345"+
    "\1\113\1\114\2\0\3\345\1\121\1\122\1\123\6\0"+
    "\1\123\2\0\1\114\2\0\1\121\1\0\1\121\53\0"+
    "\2\346\1\114\1\0\5\346\1\0\1\346\6\0\1\346"+
    "\2\0\1\114\2\0\1\346\1\0\2\346\2\0\1\346"+
    "\3\0\1\346\43\0\1\347\1\113\1\114\2\0\3\347"+
    "\1\121\1\122\1\123\6\0\1\123\2\0\1\114\2\0"+
    "\1\121\1\0\1\121\53\0\1\350\1\113\1\114\2\0"+
    "\3\350\1\121\1\122\1\123\6\0\1\123\2\0\1\114"+
    "\2\0\1\121\1\0\1\121\53\0\2\351\1\114\1\0"+
    "\5\351\1\0\1\351\6\0\1\351\2\0\1\114\2\0"+
    "\1\351\1\0\2\351\2\0\1\351\3\0\1\351\43\0"+
    "\1\352\1\113\1\114\2\0\3\352\1\121\1\122\1\123"+
    "\6\0\1\123\2\0\1\114\2\0\1\121\1\0\1\121"+
    "\53\0\1\353\1\113\1\114\2\0\3\353\1\121\1\122"+
    "\1\123\6\0\1\123\2\0\1\114\2\0\1\121\1\0"+
    "\1\121\53\0\2\354\1\114\1\0\5\354\1\0\1\354"+
    "\6\0\1\354\2\0\1\114\2\0\1\354\1\0\2\354"+
    "\2\0\1\354\3\0\1\354\43\0\1\355\1\113\1\114"+
    "\2\0\3\355\1\121\1\122\1\123\6\0\1\123\2\0"+
    "\1\114\2\0\1\121\1\0\1\121\53\0\1\356\1\113"+
    "\1\114\2\0\3\356\1\121\1\122\1\123\6\0\1\123"+
    "\2\0\1\114\2\0\1\121\1\0\1\121\53\0\2\357"+
    "\1\114\1\0\5\357\1\0\1\357\6\0\1\357\2\0"+
    "\1\114\2\0\1\357\1\0\2\357\2\0\1\357\3\0"+
    "\1\357\43\0\1\360\1\113\1\114\2\0\3\360\1\121"+
    "\1\122\1\123\6\0\1\123\2\0\1\114\2\0\1\121"+
    "\1\0\1\121\53\0\1\361\1\113\1\114\2\0\3\361"+
    "\1\121\1\122\1\123\6\0\1\123\2\0\1\114\2\0"+
    "\1\121\1\0\1\121\53\0\2\362\1\114\1\0\5\362"+
    "\1\0\1\362\6\0\1\362\2\0\1\114\2\0\1\362"+
    "\1\0\2\362\2\0\1\362\3\0\1\362\43\0\1\363"+
    "\1\113\1\114\2\0\3\363\1\121\1\122\1\123\6\0"+
    "\1\123\2\0\1\114\2\0\1\121\1\0\1\121\53\0"+
    "\1\364\1\113\1\114\2\0\3\364\1\121\1\122\1\123"+
    "\6\0\1\123\2\0\1\114\2\0\1\121\1\0\1\121"+
    "\53\0\2\365\1\114\1\0\5\365\1\0\1\365\6\0"+
    "\1\365\2\0\1\114\2\0\1\365\1\0\2\365\2\0"+
    "\1\365\3\0\1\365\43\0\1\366\1\113\1\114\2\0"+
    "\3\366\1\121\1\122\1\123\6\0\1\123\2\0\1\114"+
    "\2\0\1\121\1\0\1\121\53\0\1\367\1\113\1\114"+
    "\2\0\3\367\1\121\1\122\1\123\6\0\1\123\2\0"+
    "\1\114\2\0\1\121\1\0\1\121\53\0\2\370\1\114"+
    "\1\0\5\370\1\0\1\370\6\0\1\370\2\0\1\114"+
    "\2\0\1\370\1\0\2\370\2\0\1\370\3\0\1\370"+
    "\43\0\1\371\1\113\1\114\2\0\3\371\1\121\1\122"+
    "\1\123\6\0\1\123\2\0\1\114\2\0\1\121\1\0"+
    "\1\121\55\0\1\114\21\0\1\114\60\0\1\372\1\113"+
    "\1\114\2\0\3\372\1\121\1\122\1\123\6\0\1\123"+
    "\2\0\1\114\2\0\1\121\1\0\1\121\53\0\1\373"+
    "\1\113\1\114\2\0\3\373\1\121\1\122\1\123\6\0"+
    "\1\123\2\0\1\114\2\0\1\121\1\0\1\121\53\0"+
    "\1\374\1\113\1\114\2\0\3\374\1\121\1\122\1\123"+
    "\6\0\1\123\2\0\1\114\2\0\1\121\1\0\1\121"+
    "\53\0\1\375\1\113\1\114\2\0\3\375\1\121\1\122"+
    "\1\123\6\0\1\123\2\0\1\114\2\0\1\121\1\0"+
    "\1\121\53\0\2\113\1\114\2\0\3\113\1\121\1\122"+
    "\1\123\6\0\1\123\2\0\1\114\2\0\1\121\1\0"+
    "\1\121\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15318];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\1\1\2\11\7\1\2\11\20\1\10\11"+
    "\2\1\1\11\5\1\2\11\1\1\2\11\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\6\1\1\11\1\1\1\0"+
    "\2\1\1\11\1\0\3\1\1\11\1\1\10\0\30\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\0\5\1\5\0"+
    "\1\1\4\0\32\1\1\11\1\0\3\1\10\0\22\1"+
    "\1\0\1\11\4\0\12\1\1\11\3\0\16\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2884) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public CType yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return CType.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 33: break;
          case 2: 
            { return CType.NEW_LINE;
            }
          case 34: break;
          case 3: 
            { return CType.WHITE_CHAR;
            }
          case 35: break;
          case 4: 
            { return CType.OPERATOR;
            }
          case 36: break;
          case 5: 
            { return CType.IDENTIFIER;
            }
          case 37: break;
          case 6: 
            { return CType.INTEGER_LITERAL;
            }
          case 38: break;
          case 7: 
            { return CType.DOT;
            }
          case 39: break;
          case 8: 
            { yybegin(STRING); return CType.STRING;
            }
          case 40: break;
          case 9: 
            { yybegin(CHARLITERAL);return CType.CHARACTER_LITERAL;
            }
          case 41: break;
          case 10: 
            { return CType.LPAREN;
            }
          case 42: break;
          case 11: 
            { return CType.RPAREN;
            }
          case 43: break;
          case 12: 
            { return CType.LBRACE;
            }
          case 44: break;
          case 13: 
            { return CType.RBRACE;
            }
          case 45: break;
          case 14: 
            { return CType.LBRACK;
            }
          case 46: break;
          case 15: 
            { return CType.RBRACK;
            }
          case 47: break;
          case 16: 
            { return CType.SEMICOLON;
            }
          case 48: break;
          case 17: 
            { return CType.COMMA;
            }
          case 49: break;
          case 18: 
            { return CType.STRING;
            }
          case 50: break;
          case 19: 
            { yybegin(YYINITIAL);return CType.NEW_LINE;
            }
          case 51: break;
          case 20: 
            { yybegin(YYINITIAL);return CType.STRING;
            }
          case 52: break;
          case 21: 
            { return CType.CHARACTER_LITERAL;
            }
          case 53: break;
          case 22: 
            { yybegin(YYINITIAL);return CType.CHARACTER_LITERAL;
            }
          case 54: break;
          case 23: 
            { return CType.PRETREATMENT_LINE;
            }
          case 55: break;
          case 24: 
            { return CType.DEFINE_LINE;
            }
          case 56: break;
          case 25: 
            { yybegin(DEFINE_NEW_LINE);return CType.DEFINE_LINE;
            }
          case 57: break;
          case 26: 
            { yybegin(DEFINE);return CType.DEFINE_LINE;
            }
          case 58: break;
          case 27: 
            { return CType.COMMENT;
            }
          case 59: break;
          case 28: 
            { return CType.FLOATING_POINT_LITERAL;
            }
          case 60: break;
          case 29: 
            { return CType.KEYWORD;
            }
          case 61: break;
          case 30: 
            { yybegin(YYINITIAL);return CType.COMMENT;
            }
          case 62: break;
          case 31: 
            { { yybegin(DEFINE);return CType.DEFINE_LINE; }
            }
          case 63: break;
          case 32: 
            { yybegin(PRETREATMENT);return CType.PRETREATMENT_LINE;
            }
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
